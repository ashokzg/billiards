/* Auto-generated by genmsg_cpp for file /home/ashok/Projects/billiards/billiards_msgs/msg/GetTableStateGoal.msg */
#ifndef BILLIARDS_MSGS_MESSAGE_GETTABLESTATEGOAL_H
#define BILLIARDS_MSGS_MESSAGE_GETTABLESTATEGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace billiards_msgs
{
template <class ContainerAllocator>
struct GetTableStateGoal_ {
  typedef GetTableStateGoal_<ContainerAllocator> Type;

  GetTableStateGoal_()
  : table_frame_id()
  , filter_against_table(false)
  {
  }

  GetTableStateGoal_(const ContainerAllocator& _alloc)
  : table_frame_id(_alloc)
  , filter_against_table(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _table_frame_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  table_frame_id;

  typedef uint8_t _filter_against_table_type;
  uint8_t filter_against_table;


  typedef boost::shared_ptr< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetTableStateGoal
typedef  ::billiards_msgs::GetTableStateGoal_<std::allocator<void> > GetTableStateGoal;

typedef boost::shared_ptr< ::billiards_msgs::GetTableStateGoal> GetTableStateGoalPtr;
typedef boost::shared_ptr< ::billiards_msgs::GetTableStateGoal const> GetTableStateGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace billiards_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c34b2a0d2205320aa64b3beab9e96002";
  }

  static const char* value(const  ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc34b2a0d2205320aULL;
  static const uint64_t static_value2 = 0xa64b3beab9e96002ULL;
};

template<class ContainerAllocator>
struct DataType< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_msgs/GetTableStateGoal";
  }

  static const char* value(const  ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
string table_frame_id\n\
bool filter_against_table\n\
\n\
";
  }

  static const char* value(const  ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.table_frame_id);
    stream.next(m.filter_against_table);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTableStateGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::billiards_msgs::GetTableStateGoal_<ContainerAllocator> & v) 
  {
    s << indent << "table_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.table_frame_id);
    s << indent << "filter_against_table: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.filter_against_table);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BILLIARDS_MSGS_MESSAGE_GETTABLESTATEGOAL_H

