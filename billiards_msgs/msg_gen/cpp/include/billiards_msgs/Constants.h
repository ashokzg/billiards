/* Auto-generated by genmsg_cpp for file /home/ashok/Projects/billiards/billiards_msgs/msg/Constants.msg */
#ifndef BILLIARDS_MSGS_MESSAGE_CONSTANTS_H
#define BILLIARDS_MSGS_MESSAGE_CONSTANTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace billiards_msgs
{
template <class ContainerAllocator>
struct Constants_ {
  typedef Constants_<ContainerAllocator> Type;

  Constants_()
  {
  }

  Constants_(const ContainerAllocator& _alloc)
  {
  }

  static const float BALL_RADIUS;
  static const float TABLE_LENGTH;
  static const float TABLE_WIDTH;
  static const float TABLE_HEIGHT;
  static const float RAIL_DEPTH;
  static const float RAIL_HEIGHT;
  static const float CORNER_POCKET_WIDTH;
  static const float SIDE_POCKET_WIDTH;
  static const float BUMPER_TO_DIAMOND;
  static const float BRIDGE_OFFSET_Z;
  static const float BRIDGE_HEIGHT;
  static const float BRIDGE_WIDTH;
  static const float BRIDGE_TO_STRIKE_MIN;
  static const float BRIDGE_TO_STRIKE_MAX;
  static const float BRIDGE_THICKNESS;
  static const float ROBOT_RADIUS;
  static const float BRIDGE_IN_BASE_X;
  static const float BRIDGE_IN_BASE_Y;
  static const float BRIDGE_IN_BASE_Z;
  static const float BRIDGE_IN_BASE_QX;
  static const float BRIDGE_IN_BASE_QY;
  static const float BRIDGE_IN_BASE_QZ;
  static const float BRIDGE_IN_BASE_QW;
  static const float CUE_AZIMUTH;

  typedef boost::shared_ptr< ::billiards_msgs::Constants_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::billiards_msgs::Constants_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Constants
typedef  ::billiards_msgs::Constants_<std::allocator<void> > Constants;

typedef boost::shared_ptr< ::billiards_msgs::Constants> ConstantsPtr;
typedef boost::shared_ptr< ::billiards_msgs::Constants const> ConstantsConstPtr;

template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BALL_RADIUS = 0.028575;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::TABLE_LENGTH = 2.235;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::TABLE_WIDTH = 1.12;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::TABLE_HEIGHT = 0.78;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::RAIL_DEPTH = 0.14;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::RAIL_HEIGHT = 0.038;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::CORNER_POCKET_WIDTH = 0.125;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::SIDE_POCKET_WIDTH = 0.135;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BUMPER_TO_DIAMOND = 0.085;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_OFFSET_Z = 0.104;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_HEIGHT = 0.112;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_WIDTH = 0.052;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_TO_STRIKE_MIN = 0.25;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_TO_STRIKE_MAX = 0.33;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_THICKNESS = 0.014;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::ROBOT_RADIUS = 0.4;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_IN_BASE_X = 0.295;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_IN_BASE_Y = 0.86;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_IN_BASE_Z = 0.71;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_IN_BASE_QX = 0.0;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_IN_BASE_QY = 0.0;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_IN_BASE_QZ = 0.766;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::BRIDGE_IN_BASE_QW = 0.643;
template<typename ContainerAllocator> const float Constants_<ContainerAllocator>::CUE_AZIMUTH = 0.0524;

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::billiards_msgs::Constants_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::billiards_msgs::Constants_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace billiards_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::billiards_msgs::Constants_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::billiards_msgs::Constants_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::billiards_msgs::Constants_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e39ed62e8d9af3b362188ff9c57e1b33";
  }

  static const char* value(const  ::billiards_msgs::Constants_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe39ed62e8d9af3b3ULL;
  static const uint64_t static_value2 = 0x62188ff9c57e1b33ULL;
};

template<class ContainerAllocator>
struct DataType< ::billiards_msgs::Constants_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_msgs/Constants";
  }

  static const char* value(const  ::billiards_msgs::Constants_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::billiards_msgs::Constants_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Everything is in meters\n\
\n\
float32 BALL_RADIUS = 0.028575\n\
float32 TABLE_LENGTH = 2.235\n\
float32 TABLE_WIDTH = 1.120\n\
float32 TABLE_HEIGHT = 0.78\n\
float32 RAIL_DEPTH = 0.14\n\
float32 RAIL_HEIGHT = 0.038\n\
float32 CORNER_POCKET_WIDTH = 0.125\n\
float32 SIDE_POCKET_WIDTH = 0.135\n\
float32 BUMPER_TO_DIAMOND = 0.085\n\
\n\
float32 BRIDGE_OFFSET_Z = 0.104\n\
float32 BRIDGE_HEIGHT = 0.112 \n\
float32 BRIDGE_WIDTH = 0.052\n\
\n\
float32 BRIDGE_TO_STRIKE_MIN = 0.25\n\
float32 BRIDGE_TO_STRIKE_MAX = 0.33\n\
float32 BRIDGE_THICKNESS = 0.014\n\
\n\
float32 ROBOT_RADIUS = 0.40\n\
\n\
\n\
### Constraint on the offset of the base from the bridge\n\
float32 BRIDGE_IN_BASE_X = 0.295\n\
float32 BRIDGE_IN_BASE_Y = 0.860\n\
float32 BRIDGE_IN_BASE_Z = 0.710  # Use TABLE_HEIGHT - 0.051 (<-- base_link height)\n\
\n\
# 90 degrees to the base\n\
#float32 BRIDGE_IN_BASE_QX = 0.0\n\
#float32 BRIDGE_IN_BASE_QY = 0.0\n\
#float32 BRIDGE_IN_BASE_QZ = 0.7071\n\
#float32 BRIDGE_IN_BASE_QW = 0.7071\n\
# 100 degrees to the base\n\
float32 BRIDGE_IN_BASE_QX = 0.0\n\
float32 BRIDGE_IN_BASE_QY = 0.0\n\
float32 BRIDGE_IN_BASE_QZ = 0.766\n\
float32 BRIDGE_IN_BASE_QW = 0.643\n\
\n\
float32 CUE_AZIMUTH = 0.0524  # Radians\n\
";
  }

  static const char* value(const  ::billiards_msgs::Constants_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::billiards_msgs::Constants_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::billiards_msgs::Constants_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Constants_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::billiards_msgs::Constants_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::billiards_msgs::Constants_<ContainerAllocator> & v) 
  {
  }
};


} // namespace message_operations
} // namespace ros

#endif // BILLIARDS_MSGS_MESSAGE_CONSTANTS_H

