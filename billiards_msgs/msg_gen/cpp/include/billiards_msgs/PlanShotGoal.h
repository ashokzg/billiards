/* Auto-generated by genmsg_cpp for file /home/ashok/Projects/billiards/billiards_msgs/msg/PlanShotGoal.msg */
#ifndef BILLIARDS_MSGS_MESSAGE_PLANSHOTGOAL_H
#define BILLIARDS_MSGS_MESSAGE_PLANSHOTGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "billiards_msgs/TableState.h"

namespace billiards_msgs
{
template <class ContainerAllocator>
struct PlanShotGoal_ {
  typedef PlanShotGoal_<ContainerAllocator> Type;

  PlanShotGoal_()
  : state()
  , angle_min(0.0)
  , angle_max(0.0)
  {
  }

  PlanShotGoal_(const ContainerAllocator& _alloc)
  : state(_alloc)
  , angle_min(0.0)
  , angle_max(0.0)
  {
  }

  typedef  ::billiards_msgs::TableState_<ContainerAllocator>  _state_type;
   ::billiards_msgs::TableState_<ContainerAllocator>  state;

  typedef float _angle_min_type;
  float angle_min;

  typedef float _angle_max_type;
  float angle_max;


  typedef boost::shared_ptr< ::billiards_msgs::PlanShotGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::billiards_msgs::PlanShotGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanShotGoal
typedef  ::billiards_msgs::PlanShotGoal_<std::allocator<void> > PlanShotGoal;

typedef boost::shared_ptr< ::billiards_msgs::PlanShotGoal> PlanShotGoalPtr;
typedef boost::shared_ptr< ::billiards_msgs::PlanShotGoal const> PlanShotGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::billiards_msgs::PlanShotGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::billiards_msgs::PlanShotGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace billiards_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::billiards_msgs::PlanShotGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::billiards_msgs::PlanShotGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::billiards_msgs::PlanShotGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc416c3449f3210bfc8b6e52701b2fa2";
  }

  static const char* value(const  ::billiards_msgs::PlanShotGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfc416c3449f3210bULL;
  static const uint64_t static_value2 = 0xfc8b6e52701b2fa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::billiards_msgs::PlanShotGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_msgs/PlanShotGoal";
  }

  static const char* value(const  ::billiards_msgs::PlanShotGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::billiards_msgs::PlanShotGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
TableState state\n\
float32 angle_min # in radians\n\
float32 angle_max # in radians\n\
\n\
================================================================================\n\
MSG: billiards_msgs/TableState\n\
BallState[] balls\n\
\n\
================================================================================\n\
MSG: billiards_msgs/BallState\n\
int8                  id                  # id of the ball\n\
                                          # 0-cue ball, 1-15 for each of the 15 balls\n\
bool                  pocketed            # false if ball is on the table\n\
geometry_msgs/PointStamped   point        # location of each ball\n\
int8                  group_id            # if we want to group the ball\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::billiards_msgs::PlanShotGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::billiards_msgs::PlanShotGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.angle_min);
    stream.next(m.angle_max);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanShotGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::billiards_msgs::PlanShotGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::billiards_msgs::PlanShotGoal_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
s << std::endl;
    Printer< ::billiards_msgs::TableState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "angle_min: ";
    Printer<float>::stream(s, indent + "  ", v.angle_min);
    s << indent << "angle_max: ";
    Printer<float>::stream(s, indent + "  ", v.angle_max);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BILLIARDS_MSGS_MESSAGE_PLANSHOTGOAL_H

