/* Auto-generated by genmsg_cpp for file /home/ashok/Projects/billiards/billiards_planner/srv/PlanOneShot.srv */
#ifndef BILLIARDS_PLANNER_SERVICE_PLANONESHOT_H
#define BILLIARDS_PLANNER_SERVICE_PLANONESHOT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "billiards_msgs/ShotPlan.h"
#include "billiards_msgs/BallState.h"
#include "billiards_msgs/PocketState.h"

namespace billiards_planner
{
template <class ContainerAllocator>
struct PlanOneShotRequest_ {
  typedef PlanOneShotRequest_<ContainerAllocator> Type;

  PlanOneShotRequest_()
  {
  }

  PlanOneShotRequest_(const ContainerAllocator& _alloc)
  {
  }

  enum { cue_ball_id = 0 };

  typedef boost::shared_ptr< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanOneShotRequest
typedef  ::billiards_planner::PlanOneShotRequest_<std::allocator<void> > PlanOneShotRequest;

typedef boost::shared_ptr< ::billiards_planner::PlanOneShotRequest> PlanOneShotRequestPtr;
typedef boost::shared_ptr< ::billiards_planner::PlanOneShotRequest const> PlanOneShotRequestConstPtr;


template <class ContainerAllocator>
struct PlanOneShotResponse_ {
  typedef PlanOneShotResponse_<ContainerAllocator> Type;

  PlanOneShotResponse_()
  : shot_plans()
  , target_balls()
  , target_pockets()
  , scores()
  {
  }

  PlanOneShotResponse_(const ContainerAllocator& _alloc)
  : shot_plans(_alloc)
  , target_balls(_alloc)
  , target_pockets(_alloc)
  , scores(_alloc)
  {
  }

  typedef std::vector< ::billiards_msgs::ShotPlan_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::billiards_msgs::ShotPlan_<ContainerAllocator> >::other >  _shot_plans_type;
  std::vector< ::billiards_msgs::ShotPlan_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::billiards_msgs::ShotPlan_<ContainerAllocator> >::other >  shot_plans;

  typedef std::vector< ::billiards_msgs::BallState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::billiards_msgs::BallState_<ContainerAllocator> >::other >  _target_balls_type;
  std::vector< ::billiards_msgs::BallState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::billiards_msgs::BallState_<ContainerAllocator> >::other >  target_balls;

  typedef std::vector< ::billiards_msgs::PocketState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::billiards_msgs::PocketState_<ContainerAllocator> >::other >  _target_pockets_type;
  std::vector< ::billiards_msgs::PocketState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::billiards_msgs::PocketState_<ContainerAllocator> >::other >  target_pockets;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _scores_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  scores;


  typedef boost::shared_ptr< ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::billiards_planner::PlanOneShotResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanOneShotResponse
typedef  ::billiards_planner::PlanOneShotResponse_<std::allocator<void> > PlanOneShotResponse;

typedef boost::shared_ptr< ::billiards_planner::PlanOneShotResponse> PlanOneShotResponsePtr;
typedef boost::shared_ptr< ::billiards_planner::PlanOneShotResponse const> PlanOneShotResponseConstPtr;

struct PlanOneShot
{

typedef PlanOneShotRequest Request;
typedef PlanOneShotResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PlanOneShot
} // namespace billiards_planner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e55a614ea143dccc553b213b41c5a2f0";
  }

  static const char* value(const  ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe55a614ea143dcccULL;
  static const uint64_t static_value2 = 0x553b213b41c5a2f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_planner/PlanOneShotRequest";
  }

  static const char* value(const  ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 cue_ball_id = 0\n\
\n\
";
  }

  static const char* value(const  ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::billiards_planner::PlanOneShotResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fb9eff8f1a7ab0ad576652f1eb8e7f06";
  }

  static const char* value(const  ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfb9eff8f1a7ab0adULL;
  static const uint64_t static_value2 = 0x576652f1eb8e7f06ULL;
};

template<class ContainerAllocator>
struct DataType< ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_planner/PlanOneShotResponse";
  }

  static const char* value(const  ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_msgs/ShotPlan[] shot_plans\n\
billiards_msgs/BallState[] target_balls\n\
billiards_msgs/PocketState[] target_pockets\n\
float64[] scores\n\
\n\
\n\
================================================================================\n\
MSG: billiards_msgs/ShotPlan\n\
# describes plan for a single shot\n\
BallState ball\n\
geometry_msgs/PoseStamped base_pose                     # where PR2 should \"stand\"\n\
geometry_msgs/PoseStamped bridge_pose                   # where to put the bridge\n\
                                                        # orientation is: x-forward (towards cue ball)\n\
                                                        #                 z-(up)\n\
                                                        #                 y-robot left\n\
float64                   velocity                      # not used for now\n\
\n\
\n\
================================================================================\n\
MSG: billiards_msgs/BallState\n\
int8                  id                  # id of the ball\n\
                                          # 0-cue ball, 1-15 for each of the 15 balls\n\
bool                  pocketed            # false if ball is on the table\n\
geometry_msgs/PointStamped   point        # location of each ball\n\
int8                  group_id            # if we want to group the ball\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: billiards_msgs/PocketState\n\
uint8                 id              # pocket id, see wiki for picture\n\
geometry_msgs/PointStamped   point    # point of the pocket to aim for,\n\
                                      # target ball trajectory should\n\
                                      # cross this point if shot is successful\n\
\n\
\n\
";
  }

  static const char* value(const  ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::billiards_planner::PlanOneShotRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanOneShotRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::billiards_planner::PlanOneShotResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.shot_plans);
    stream.next(m.target_balls);
    stream.next(m.target_pockets);
    stream.next(m.scores);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanOneShotResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<billiards_planner::PlanOneShot> {
  static const char* value() 
  {
    return "1738dae8d954291c88f7ba5441984a1e";
  }

  static const char* value(const billiards_planner::PlanOneShot&) { return value(); } 
};

template<>
struct DataType<billiards_planner::PlanOneShot> {
  static const char* value() 
  {
    return "billiards_planner/PlanOneShot";
  }

  static const char* value(const billiards_planner::PlanOneShot&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<billiards_planner::PlanOneShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1738dae8d954291c88f7ba5441984a1e";
  }

  static const char* value(const billiards_planner::PlanOneShotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<billiards_planner::PlanOneShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_planner/PlanOneShot";
  }

  static const char* value(const billiards_planner::PlanOneShotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<billiards_planner::PlanOneShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1738dae8d954291c88f7ba5441984a1e";
  }

  static const char* value(const billiards_planner::PlanOneShotResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<billiards_planner::PlanOneShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_planner/PlanOneShot";
  }

  static const char* value(const billiards_planner::PlanOneShotResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BILLIARDS_PLANNER_SERVICE_PLANONESHOT_H

