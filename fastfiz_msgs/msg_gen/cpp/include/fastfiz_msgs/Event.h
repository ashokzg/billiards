/* Auto-generated by genmsg_cpp for file /home/ashok/Projects/billiards/fastfiz_msgs/msg/Event.msg */
#ifndef FASTFIZ_MSGS_MESSAGE_EVENT_H
#define FASTFIZ_MSGS_MESSAGE_EVENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "billiards_msgs/BallState.h"
#include "billiards_msgs/BallState.h"

namespace fastfiz_msgs
{
template <class ContainerAllocator>
struct Event_ {
  typedef Event_<ContainerAllocator> Type;

  Event_()
  : type(0)
  , ball1()
  , ball2()
  , string_rep()
  {
  }

  Event_(const ContainerAllocator& _alloc)
  : type(0)
  , ball1(_alloc)
  , ball2(_alloc)
  , string_rep(_alloc)
  {
  }

  typedef uint8_t _type_type;
  uint8_t type;

  typedef  ::billiards_msgs::BallState_<ContainerAllocator>  _ball1_type;
   ::billiards_msgs::BallState_<ContainerAllocator>  ball1;

  typedef  ::billiards_msgs::BallState_<ContainerAllocator>  _ball2_type;
   ::billiards_msgs::BallState_<ContainerAllocator>  ball2;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _string_rep_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  string_rep;

  enum { NO_EVENT = 0 };
  enum { STATE_CHANGE = 1 };
  enum { BALL_COLLISION = 2 };
  enum { RAIL_COLLISION = 3 };
  enum { POCKETED = 4 };
  enum { CUE_STRIKE = 5 };
  enum { MISCUE = 6 };
  enum { UNKNOWN_EVENT = 7 };

  typedef boost::shared_ptr< ::fastfiz_msgs::Event_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastfiz_msgs::Event_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Event
typedef  ::fastfiz_msgs::Event_<std::allocator<void> > Event;

typedef boost::shared_ptr< ::fastfiz_msgs::Event> EventPtr;
typedef boost::shared_ptr< ::fastfiz_msgs::Event const> EventConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::fastfiz_msgs::Event_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::fastfiz_msgs::Event_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace fastfiz_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fastfiz_msgs::Event_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fastfiz_msgs::Event_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fastfiz_msgs::Event_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc315df2bb491329dab45557e8a0ed50";
  }

  static const char* value(const  ::fastfiz_msgs::Event_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdc315df2bb491329ULL;
  static const uint64_t static_value2 = 0xdab45557e8a0ed50ULL;
};

template<class ContainerAllocator>
struct DataType< ::fastfiz_msgs::Event_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastfiz_msgs/Event";
  }

  static const char* value(const  ::fastfiz_msgs::Event_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fastfiz_msgs::Event_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 NO_EVENT = 0\n\
uint8 STATE_CHANGE = 1\n\
uint8 BALL_COLLISION = 2\n\
uint8 RAIL_COLLISION = 3\n\
uint8 POCKETED = 4\n\
uint8 CUE_STRIKE = 5\n\
uint8 MISCUE = 6\n\
uint8 UNKNOWN_EVENT = 7\n\
\n\
uint8 type\n\
\n\
billiards_msgs/BallState ball1\n\
billiards_msgs/BallState ball2\n\
\n\
string string_rep\n\
\n\
\n\
================================================================================\n\
MSG: billiards_msgs/BallState\n\
int8                  id                  # id of the ball\n\
                                          # 0-cue ball, 1-15 for each of the 15 balls\n\
bool                  pocketed            # false if ball is on the table\n\
geometry_msgs/PointStamped   point        # location of each ball\n\
int8                  group_id            # if we want to group the ball\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::fastfiz_msgs::Event_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fastfiz_msgs::Event_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.ball1);
    stream.next(m.ball2);
    stream.next(m.string_rep);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Event_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fastfiz_msgs::Event_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::fastfiz_msgs::Event_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "ball1: ";
s << std::endl;
    Printer< ::billiards_msgs::BallState_<ContainerAllocator> >::stream(s, indent + "  ", v.ball1);
    s << indent << "ball2: ";
s << std::endl;
    Printer< ::billiards_msgs::BallState_<ContainerAllocator> >::stream(s, indent + "  ", v.ball2);
    s << indent << "string_rep: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.string_rep);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FASTFIZ_MSGS_MESSAGE_EVENT_H

