/* Auto-generated by genmsg_cpp for file /home/ashok/Projects/billiards/fastfiz_msgs/srv/SimulateShot.srv */
#ifndef FASTFIZ_MSGS_SERVICE_SIMULATESHOT_H
#define FASTFIZ_MSGS_SERVICE_SIMULATESHOT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "billiards_msgs/TableState.h"
#include "fastfiz_msgs/ShotParams.h"


#include "billiards_msgs/TableState.h"
#include "fastfiz_msgs/Event.h"

namespace fastfiz_msgs
{
template <class ContainerAllocator>
struct SimulateShotRequest_ {
  typedef SimulateShotRequest_<ContainerAllocator> Type;

  SimulateShotRequest_()
  : state()
  , shot()
  {
  }

  SimulateShotRequest_(const ContainerAllocator& _alloc)
  : state(_alloc)
  , shot(_alloc)
  {
  }

  typedef  ::billiards_msgs::TableState_<ContainerAllocator>  _state_type;
   ::billiards_msgs::TableState_<ContainerAllocator>  state;

  typedef  ::fastfiz_msgs::ShotParams_<ContainerAllocator>  _shot_type;
   ::fastfiz_msgs::ShotParams_<ContainerAllocator>  shot;


  typedef boost::shared_ptr< ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimulateShotRequest
typedef  ::fastfiz_msgs::SimulateShotRequest_<std::allocator<void> > SimulateShotRequest;

typedef boost::shared_ptr< ::fastfiz_msgs::SimulateShotRequest> SimulateShotRequestPtr;
typedef boost::shared_ptr< ::fastfiz_msgs::SimulateShotRequest const> SimulateShotRequestConstPtr;


template <class ContainerAllocator>
struct SimulateShotResponse_ {
  typedef SimulateShotResponse_<ContainerAllocator> Type;

  SimulateShotResponse_()
  : state()
  , events()
  {
  }

  SimulateShotResponse_(const ContainerAllocator& _alloc)
  : state(_alloc)
  , events(_alloc)
  {
  }

  typedef  ::billiards_msgs::TableState_<ContainerAllocator>  _state_type;
   ::billiards_msgs::TableState_<ContainerAllocator>  state;

  typedef std::vector< ::fastfiz_msgs::Event_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fastfiz_msgs::Event_<ContainerAllocator> >::other >  _events_type;
  std::vector< ::fastfiz_msgs::Event_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fastfiz_msgs::Event_<ContainerAllocator> >::other >  events;


  typedef boost::shared_ptr< ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimulateShotResponse
typedef  ::fastfiz_msgs::SimulateShotResponse_<std::allocator<void> > SimulateShotResponse;

typedef boost::shared_ptr< ::fastfiz_msgs::SimulateShotResponse> SimulateShotResponsePtr;
typedef boost::shared_ptr< ::fastfiz_msgs::SimulateShotResponse const> SimulateShotResponseConstPtr;

struct SimulateShot
{

typedef SimulateShotRequest Request;
typedef SimulateShotResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SimulateShot
} // namespace fastfiz_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57691228e79ee18d9060a3cc1d2c8baf";
  }

  static const char* value(const  ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x57691228e79ee18dULL;
  static const uint64_t static_value2 = 0x9060a3cc1d2c8bafULL;
};

template<class ContainerAllocator>
struct DataType< ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastfiz_msgs/SimulateShotRequest";
  }

  static const char* value(const  ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_msgs/TableState state\n\
ShotParams shot\n\
\n\
================================================================================\n\
MSG: billiards_msgs/TableState\n\
BallState[] balls\n\
\n\
================================================================================\n\
MSG: billiards_msgs/BallState\n\
int8                  id                  # id of the ball\n\
                                          # 0-cue ball, 1-15 for each of the 15 balls\n\
bool                  pocketed            # false if ball is on the table\n\
geometry_msgs/PointStamped   point        # location of each ball\n\
int8                  group_id            # if we want to group the ball\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: fastfiz_msgs/ShotParams\n\
float64 a     # The x-coordinate of the cue stick (right/left english) on the CUE ball in mm. \n\
float64 b     # The y-coordinate of the cue stick (top/bottom english) on the CUE ball in mm. \n\
float64 theta # The elevation of the cue stick in degrees. \n\
float64 phi   # The azumith angle (heading) of the cue stick in degrees. \n\
float64 v     # The velocity of the cue stick before impact in m/s (max is 4.5 m/s). \n\
";
  }

  static const char* value(const  ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95ea3d0d27b0dd9de5c769873a657651";
  }

  static const char* value(const  ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x95ea3d0d27b0dd9dULL;
  static const uint64_t static_value2 = 0xe5c769873a657651ULL;
};

template<class ContainerAllocator>
struct DataType< ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastfiz_msgs/SimulateShotResponse";
  }

  static const char* value(const  ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "billiards_msgs/TableState state\n\
Event[] events\n\
\n\
================================================================================\n\
MSG: billiards_msgs/TableState\n\
BallState[] balls\n\
\n\
================================================================================\n\
MSG: billiards_msgs/BallState\n\
int8                  id                  # id of the ball\n\
                                          # 0-cue ball, 1-15 for each of the 15 balls\n\
bool                  pocketed            # false if ball is on the table\n\
geometry_msgs/PointStamped   point        # location of each ball\n\
int8                  group_id            # if we want to group the ball\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: fastfiz_msgs/Event\n\
uint8 NO_EVENT = 0\n\
uint8 STATE_CHANGE = 1\n\
uint8 BALL_COLLISION = 2\n\
uint8 RAIL_COLLISION = 3\n\
uint8 POCKETED = 4\n\
uint8 CUE_STRIKE = 5\n\
uint8 MISCUE = 6\n\
uint8 UNKNOWN_EVENT = 7\n\
\n\
uint8 type\n\
\n\
billiards_msgs/BallState ball1\n\
billiards_msgs/BallState ball2\n\
\n\
string string_rep\n\
\n\
\n\
";
  }

  static const char* value(const  ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.shot);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimulateShotRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.events);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimulateShotResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<fastfiz_msgs::SimulateShot> {
  static const char* value() 
  {
    return "fa1efda9acdc73b5f88a0d0985d85697";
  }

  static const char* value(const fastfiz_msgs::SimulateShot&) { return value(); } 
};

template<>
struct DataType<fastfiz_msgs::SimulateShot> {
  static const char* value() 
  {
    return "fastfiz_msgs/SimulateShot";
  }

  static const char* value(const fastfiz_msgs::SimulateShot&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fa1efda9acdc73b5f88a0d0985d85697";
  }

  static const char* value(const fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastfiz_msgs/SimulateShot";
  }

  static const char* value(const fastfiz_msgs::SimulateShotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fa1efda9acdc73b5f88a0d0985d85697";
  }

  static const char* value(const fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastfiz_msgs/SimulateShot";
  }

  static const char* value(const fastfiz_msgs::SimulateShotResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FASTFIZ_MSGS_SERVICE_SIMULATESHOT_H

